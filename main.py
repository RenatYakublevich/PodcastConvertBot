import logging

#aiogram –∏ –≤—Å—ë —É—Ç–∏–ª–∏—Ç—ã –¥–ª—è –∫–æ—Ä–µ–∫—Ç–Ω–æ–π —Ä–∞–±–æ—Ç—ã —Å Telegram API
from aiogram import Bot, types
from aiogram.utils import executor
from aiogram.utils.emoji import emojize
from aiogram.dispatcher import Dispatcher
from aiogram.types.message import ContentType
from aiogram.utils.markdown import text, bold, italic, code, pre
from aiogram.types import ParseMode, InputMediaPhoto, InputMediaVideo, ChatActions
from aiogram.types import ReplyKeyboardRemove,ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from pytube import YouTube
from pytube import helpers

import config #–∫–æ–Ω—Ñ–∏–≥ —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ –∏ API –∫–ª—é—á—è–º–∏
import youtube_download as yt


#–∑–∞–¥–∞—ë–º –ª–æ–≥–∏
logging.basicConfig(filename="log.log", level=logging.INFO)

#–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–æ—Ç–∞
bot = Bot(token=config.TOKEN)
dp = Dispatcher(bot,storage=MemoryStorage())

@dp.message_handler(commands=['start'],state='*')
async def start(message):
    ''' –§—É–Ω–∫—Ü–∏—è –∫–æ—Ç–æ—Ä–∞—è –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /start '''
    await message.answer('–ü—Ä–∏–≤–µ—Ç —è Podcast Converter Bot!ü§ñ\n\n–ò —è —É–º–µ—é –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –≤–∏–¥–µ–æ-—Ä–æ–ª–∏–∫–∏ —Å —é—Ç—É–±–∞ –≤ —É–¥–æ–±–Ω—ã–µ mp3 –ø–æ–¥–∫–∞—Å—Ç—ã\n–ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å –º–Ω–µ —Å—Å—ã–ª–∫—É –∏ –≤—Å—ë!')

@dp.message_handler(lambda message : message.text.startswith('https://') or message.text.startswith('www'))
async def conver_to_podcast(message):
    ''' –§—É–Ω–∫—Ü–∏—è –∫–æ—Ç–æ—Ä–∞—è –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç –≤–∏–¥–µ–æ —Ä–æ–ª–∏–∫ –∏–∑ —é—Ç—É–±–∞ –ø–æ —Å—Å—ã–ª–∫–µ –≤ mp3 –ø–æ–¥–∫—Å–∞—Ç  '''
    try:

        await message.answer('–ü–æ–¥–æ–∂–¥–∏—Ç–µ –Ω–µ–º–Ω–æ–≥–æ')
        name_audio_file = '–î–ª—è —Ç–µ–±—è - ' + message.from_user.username

        yt.download_from_youtube(message.text,name_audio_file)

        yt.convert_mp4_to_mp3(name_audio_file)
        with open(f'videos/{name_audio_file}.mp3', 'rb') as podcast:
            await message.answer_audio(audio=podcast,caption='–í–æ—Ç –¥–µ—Ä–∂–∏ —Å–≤–æ–π –ø–æ–¥–∫–∞—Å—Ç!')
        yt.delete_audiofile(name_audio_file)
    except Exception as e:
        await message.answer('–í–∞—à–∞ —Å—Å—ã–ª–∫–∞ –Ω–µ–∫–æ—Ä–µ–∫—Ç–Ω–∞!')
        log.exception("Error - " + e)

@dp.message_handler(commands=['about'])
async def except_answer(message : types.Message):
	''' –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–≤–æ–¥–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –±–æ—Ç–µ '''
	await message.answer('PodcastConverter version 1.0\nGithub - ')



@dp.message_handler()
async def except_answer(message : types.Message):
	''' –§—É–Ω–∫—Ü–∏—è –Ω–µ–ø—Ä–µ–¥—Å–∫–∞–∑—É–º–æ–≥–æ–≥–æ –æ—Ç–≤–µ—Ç–∞ '''
	await message.answer('–Ø –Ω–µ –∑–Ω–∞—é, —á—Ç–æ —Å —ç—Ç–∏–º –¥–µ–ª–∞—Ç—å üò≤\n–Ø –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–æ–º–Ω—é, —á—Ç–æ –µ—Å—Ç—å –∫–æ–º–∞–Ω–¥–∞ /help')

executor.start_polling(dp, skip_updates=True)
